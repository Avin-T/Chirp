import { ArrowBackIcon } from "@chakra-ui/icons";
import {
	Avatar,
	Card,
	Flex,
	IconButton,
	Spinner,
	Text,
} from "@chakra-ui/react";
import {
	addDoc,
	collection,
	doc,
	orderBy,
	query,
	serverTimestamp,
	where,
} from "firebase/firestore";
import { useState } from "react";
import { useAuthState } from "react-firebase-hooks/auth";
import { useCollectionData } from "react-firebase-hooks/firestore";
import { auth, db } from "../../../firebase";
import { useChat } from "../contexts/ChatContext";
import relationGenerator from "../helpers/relationGenerator";
import Divider from "./Divider";
import Footer from "./Footer";
import Messages from "./Messages";

interface ChatProps {
	reciever: string;
	displayName: string;
	photoURL: string;
}

const Chat = ({ reciever, displayName, photoURL }: ChatProps) => {
	// useAuthState is a react-firebase-hooks function that returns the current user that is logged in.
	const [currentUser] = useAuthState(auth);

	// useCollectionData is a react-firebase-hooks function that returns the data from the collection you pass in.

	// reciever is passed in from the ChatList component.

	// Here we are getting the chats collection where if the relation field is equal to the relation generated by the relationGenerator function(which sorts the ids of the users in alphabetical order).

	// We are also ordering the data by the createdAt field in descending order.
	const [values, loading, error] = useCollectionData(
		query(
			collection(db, "chats"),
			where(
				"relation",
				"==",
				relationGenerator(currentUser?.uid ?? "-", reciever)
			),
			orderBy("createdAt", "desc")
		),
		{
			snapshotListenOptions: { includeMetadataChanges: true },
		}
	);

	// useDocumentData is a react-firebase-hooks function that returns the data from the document you pass in.

	// Here we are getting the users collection where the id is equal to the reciever id.
	// const [recieverValue, recieverLoading, recieverError] = useDocumentData(
	// 	doc(db, "users", reciever ?? "-"),
	// 	{
	// 		snapshotListenOptions: { includeMetadataChanges: true },
	// 	}
	// );

	// useState hook is used to store the input message.
	const [inputMessage, setInputMessage] = useState("");
	const { setChat } = useChat();

	// handleSendMessage function is used to add a new document to the chats collection.

	// if the current user send a message, the fromId field is equal to the current user id and the toId field is equal to the reciever id, and vice versa.

	// handleSendMessage function is called when the send button is clicked and updates the database if a message is entered with the inputMessage state containing all the details like the fromId, toId, text, createdAt, from, to and relation.

	const handleSendMessage = async () => {
		if (currentUser?.uid && inputMessage) {
			await addDoc(collection(db, "chats"), {
				fromId: currentUser?.uid,
				toId: reciever,
				text: inputMessage,
				createdAt: serverTimestamp(),
				from: doc(db, "users", currentUser?.uid),
				to: doc(db, "users", reciever),
				relation: relationGenerator(currentUser?.uid, reciever),
			});
		}
		if (inputMessage) {
			setInputMessage("");
		}
	};

	if (error) {
		return <Spinner />;
	}

	return (
		<Flex
			as={Card}
			mx="0"
			h={{ base: "calc(100vh - calc(100vh - 100%))", md: "100vh" }}
			position="fixed"
			overflowY="scroll"
			p="0"
			top="0"
			right={{ base: "0", md: "40" }}
			maxW="xs"
			w="full"
		>
			<Flex
				w="100%"
				h={{ base: "calc(100vh - calc(100vh - 100%))", md: "100vh" }}
				flexDir="column"
			>
				<Flex
					flexDirection="row"
					justify="center"
					alignItems="center"
					gap="2"
					mt="3"
				>
					{/* If the reciever has a photoURL, then display the photoURL, else display a random image at the header of the chat box */}
					<IconButton
						icon={<ArrowBackIcon />}
						variant="unstyled"
						aria-label="Back to chat list"
						size="lg"
						onClick={() => setChat("")}
					/>
					<Avatar src={photoURL} />

					{/* If the reciever has a displayName, then display the displayNameat the header of the chat box */}
					<Text fontSize="lg" fontWeight="bold" flexGrow="1">
						{displayName}
					</Text>
				</Flex>

				<Divider />

				{/* Passing the messages, currentUser, recieverValue to the Messages component */}
				{!loading ? (
					<Messages
						messages={values as any}
						currentUser={currentUser}
						recieverValue={{
							photoURL,
							displayName,
						}}
					/>
				) : (
					<Flex
						w="100%"
						h="80%"
						overflowY="scroll"
						flexDirection="column-reverse"
						p="3"
					/>
				)}
				<Divider />

				{/* Footer is the chat input field where the message is typed and submitted using the handleSendMessage component and the value of the input message is updated using the setInputMessage state */}
				<Footer
					inputMessage={inputMessage}
					setInputMessage={setInputMessage}
					handleSendMessage={handleSendMessage}
				/>
			</Flex>
		</Flex>
	);
};

export default Chat;
